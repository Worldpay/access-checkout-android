apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
}

def loggingClasses = ['**/logging/LoggingUtils*', '**/logging/AccessCheckoutLogger*']
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'] + loggingClasses
def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"

def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

def sourceDirectoryFiles = files([mainSrc])
def classDirectoryFiles = files([debugTree], [kotlinDebugTree])
def unitTestTask = "testDebugUnitTest"
def executionDataFile = files("${buildDir}/jacoco/" + unitTestTask + ".exec")

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }

    onlyIf = {
        true
    }

    sourceDirectories.setFrom(sourceDirectoryFiles)
    classDirectories.setFrom(classDirectoryFiles)
    executionData.setFrom(executionDataFile)

}

task jacocoTestReport(type: JacocoReport, dependsOn: unitTestTask) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(sourceDirectoryFiles)
    classDirectories.setFrom(classDirectoryFiles)
    executionData.setFrom(executionDataFile)
}
