apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.10'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/logging/LoggingUtils*',
        '**/logging/AccessCheckoutLogger*',
        // excludes classes generated by for coroutines by compiler, e.g. see method doGet in HttpsClient
        '**/HttpsClient*$2*',
        '**/*.<init>(*DefaultConstructorMarker*)'
]

def classDirs = files([
        fileTree(dir: "${layout.buildDirectory}/intermediates/classes/debug", excludes: fileFilter) +
        fileTree(dir: "${layout.buildDirectory}/tmp/kotlin-classes/debug", excludes: fileFilter)
])

def execData = files("$layout.buildDirectory/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")

def sourceDirs = files(["${project.projectDir}/src/main/java"])

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest']
    executionData.setFrom(execData)
    classDirectories.setFrom(classDirs)
    sourceDirectories.setFrom(sourceDirs)
}

tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn 'jacocoTestReport'
    executionData.setFrom(execData)
    classDirectories.setFrom(classDirs)
    sourceDirectories.setFrom(sourceDirs)

    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
}
