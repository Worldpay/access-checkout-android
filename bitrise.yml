---
format_version: '6'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
workflows:
  deploy:
    steps:
    - cache-pull@2.7.2: {}
    - script@1.2.0:
        title: Get project version
        inputs:
          - content: bitrise/scripts/get_project_version.sh
    - install-missing-android-tools@3.1.0:
        inputs:
        - gradlew_path: "gradlew"
    - android-lint@0.9.11:
        title: "Lint check on app module"
        inputs:
          - module: "$APP_MODULE"
          - variant: "$APP_PROD_VARIANT"
    - android-unit-test@1.0.6:
        title: "Unit tests on app module"
        inputs:
          - module: "$APP_MODULE"
          - variant: "$APP_PROD_VARIANT"
    - android-lint@0.9.11:
        title: "Lint check on Library module"
        inputs:
        - module: "$LIBRARY_MODULE"
        - variant: "$LIBRARY_VARIANT"
    - android-unit-test@1.0.6:
        title: "Unit tests on Library module"
        inputs:
        - module: "$LIBRARY_MODULE"
        - variant: "$LIBRARY_VARIANT"
    - script@1.2.0:
        title: Install pact client
        inputs:
          - content: gem install pact_broker-client
    - script-runner@0.9.3:
        title: "Tag pact with prod"
        inputs:
          - file_path: bitrise/scripts/tag_prod_pact_version.sh
    - gradle-runner@2.0.1:
        title: "Code coverage check"
        inputs:
        - gradlew_path: "gradlew"
        - gradle_task: jacocoTestCoverageVerification
        - gradle_file: "$LIBRARY_MODULE/build.gradle"
    - deploy-to-bitrise-io@2.1.4:
        title: "Export code coverage results to Bitrise"
        inputs:
        - is_compress: 'true'
        - zip_name: jacoco-reports
        - deploy_path: "$LIBRARY_MODULE/build/reports/jacoco/jacocoTestReport/html"
    - gradle-runner@2.0.1:
        title: Build release artifacts
        inputs:
          - gradlew_path: gradlew
          - gradle_task: ":$LIBRARY_MODULE:assembleRelease javadocJar sourcesJar"
          - gradle_file: $LIBRARY_MODULE//build.gradle
    - file-downloader@1.0.3:
        inputs:
          - destination: "$LIBRARY_MODULE/secring.gpg"
          - source: "$BITRISEIO_GPG_SECRET_KEY_RING_FILE_URL"
    - gradle-runner@2.0.1:
        title: "Deploy to Nexus Staging"
        inputs:
        - gradlew_path: "gradlew"
        - gradle_task: "clean :access-checkout:publishReleasePublicationToSonatypeRepository closeAndReleaseSonatypeStagingRepository --info -s -PsonatypeUsername=$NEXUS_USERNAME -PsonatypePassword=$NEXUS_PASSWORD -Psigning.keyId=$GPG_SIGNING_KEY_ID -Psigning.password=$GPG_SIGNING_KEY_PASSWORD -Psigning.secretKeyRingFile=secring.gpg"
        - gradle_file: "./build.gradle"
    - github-release@0.11.0:
        title: "Deploy release to github"
        inputs:
          - username: $GITHUB_USERNAME
          - repository_url: $GIT_REPOSITORY_URL
          - tag: "v$PROJECT_VERSION"
          - name: $PROJECT_VERSION
          - files_to_upload: |-
              $LIBRARY_MODULE/build/outputs/aar/$ARTIFACT_NAME-$PROJECT_VERSION.aar
              $LIBRARY_MODULE/build/libs/$ARTIFACT_NAME-$PROJECT_VERSION-javadoc.jar
              $LIBRARY_MODULE/build/libs/$ARTIFACT_NAME-$PROJECT_VERSION-sources.jar
          - commit: $GIT_CLONE_COMMIT_HASH
          - body: Release of SDK version $PROJECT_VERSION
          - api_token: $GITHUB_PERSONAL_ACCESS_TOKEN
          - pre_release: 'no'
          - draft: 'no'
    - cache-push@2.7.1: {}

  primary:
    steps:
    - set-java-version@1: {"11"}
    - build-router-start@0.14.0:
        inputs:
        - workflows: |-
            primary-ui-mock
            primary-ui-prod
        - access_token: "$BITRISE_PERSONAL_ACCESS_TOKEN_PARALLEL_BUILDS"
    - cache-pull@2.7.2: {}
    - install-missing-android-tools@3.1.0:
        inputs:
        - gradlew_path: "gradlew"
    - android-lint@0.9.11:
        title: "Lint check on demo-app module"
        inputs:
          - module: "$APP_MODULE"
          - variant: "$APP_PROD_VARIANT"
    - android-unit-test@1.0.6:
        title: "Run unit tests for demo-app module"
        inputs:
          - module: "$APP_MODULE"
          - variant: "$APP_PROD_VARIANT"
    - android-lint@0.9.11:
        title: "Lint check on library module"
        inputs:
        - module: "$LIBRARY_MODULE"
        - variant: "$LIBRARY_VARIANT"
    - android-unit-test@1.0.6:
        title: "Run unit tests for library module"
        inputs:
        - module: "$LIBRARY_MODULE"
        - variant: "$LIBRARY_VARIANT"
    - script@1.2.0:
        title: Get project version
        inputs:
          - content: bitrise/scripts/get_project_version.sh --allow-snapshots
    - script@1.2.0:
        title: Install pact client
        inputs:
          - content: gem install pact_broker-client
    - script-runner@0.9.3:
        title: "Deploy pact file to pact broker"
        inputs:
          - file_path: bitrise/scripts/upload_pact.sh
    - script-runner@0.9.3:
        title: "Verify pact tags on broker"
        inputs:
          - file_path: bitrise/scripts/verify_pact_tags.sh
    - gradle-runner@2.0.1:
        title: "Code coverage check"
        inputs:
        - gradlew_path: "gradlew"
        - gradle_task: jacocoTestCoverageVerification
        - gradle_file: "$LIBRARY_MODULE/build.gradle"
    - deploy-to-bitrise-io@2.1.4:
        title: "Export code coverage results to Bitrise"
        inputs:
        - is_compress: 'true'
        - zip_name: jacoco-reports
        - deploy_path: "$LIBRARY_MODULE/build/reports/jacoco/jacocoTestReport/html"
    - deploy-to-bitrise-io@2.1.4:
        title: "Export test report to Bitrise"
        inputs:
          - is_compress: 'true'
          - zip_name: test-reports
          - deploy_path: "$LIBRARY_MODULE/build/reports/tests/testDebugUnitTest"
          - is_always_run: true
    - gradle-runner@2.0.1:
        title: "Generate javadoc documentation"
        inputs:
        - gradlew_path: "gradlew"
        - gradle_task: dokkaJavadoc
        - gradle_file: "$LIBRARY_MODULE/build.gradle"
    - deploy-to-bitrise-io@2.1.4:
        title: "Export javadoc to Bitrise"
        inputs:
        - is_compress: 'true'
        - zip_name: javadoc
        - deploy_path: "$LIBRARY_MODULE/build/dokka/javadoc"
    - android-build@1.0.5:
        title: "Build test APK"
        inputs:
          - variant: "${LIBRARY_VARIANT}AndroidTest"
          - module: "$LIBRARY_MODULE"
    - script@1.2.0:
        title: "Set path to test APK"
        inputs:
          - content: |-
              #!/bin/bash
              envman add --key "BITRISE_TEST_APK" --value "$BITRISE_APK_PATH"
    - android-build@1.0.5:
        title: "Build app APK"
        inputs:
          - module: "$APP_MODULE"
          - variant: "$APP_PROD_VARIANT"
          - arguments: -PmerchantID=\"${MERCHANT_ID}\"
    - virtual-device-testing-for-android@1.1.8:
        title: "Run integration tests against app"
        inputs:
          - test_type: instrumentation
          - test_apk_path: "$BITRISE_TEST_APK"
          - test_devices: |-
              Pixel2,28,en,portrait
    - cache-push@2.7.1: {}
    - build-router-wait@0.12.4:
        inputs:
          - access_token: "$BITRISE_PERSONAL_ACCESS_TOKEN_PARALLEL_BUILDS"
    - slack@3.1.5:
        run_if: |-
          {{.IsBuildFailed | and (enveq "BITRISE_GIT_BRANCH" "master")}}
        inputs:
          - channel_on_error: "#access-checkout-build"
          - text_on_error: "Primary build for Access Checkout Android Failed"
          - webhook_url: "$SLACK_ACO_BUILD_WEBHOOK_URL"

  primary-ui-mock:
    envs:
      - APP_VARIANT: "$APP_MOCK_VARIANT"
    after_run:
      - ui-tests

  primary-ui-prod:
    envs:
      - APP_VARIANT: "$APP_PROD_VARIANT"
    after_run:
      - ui-tests

  ui-tests:
    steps:
      - set-java-version@1: { "11" }
      - cache-pull@2.7.2: { }
      - install-missing-android-tools@3.1.0:
          inputs:
            - gradlew_path: "gradlew"
      - android-build@1.0.5:
          title: "Build test APK"
          inputs:
            - variant: "${APP_VARIANT}AndroidTest"
            - module: "$APP_MODULE"
      - script@1.2.0:
          title: "Set path to test APK"
          inputs:
            - content: |-
                #!/bin/bash
                envman add --key "BITRISE_TEST_APK" --value "$BITRISE_APK_PATH"
      - android-build@1.0.5:
          title: "Build app APK"
          inputs:
            - module: "$APP_MODULE"
            - variant: "$APP_VARIANT"
      - virtual-device-testing-for-android@1.1.8:
          title: "Run UI tests against app"
          inputs:
            - test_type: instrumentation
            - test_apk_path: "$BITRISE_TEST_APK"
            - test_timeout: 1500
            - test_devices: |-
                Nexus5,22,en,portrait
                Nexus5,23,en,portrait
                Nexus6,24,en,portrait
                Nexus6,25,en,portrait
                Pixel2,26,en,portrait
                Pixel2,27,en,portrait
                Pixel2,28,en,portrait
                Pixel2,29,en,portrait
                Pixel2.arm,30,en,portrait
                Pixel2.arm,32,en,portrait
                Pixel2.arm,33,en,portrait
      - cache-push@2.7.1: { }

app:
  envs:
  - LIBRARY_MODULE: access-checkout
    opts:
      is_expand: false
  - ARTIFACT_NAME: access-checkout-android
    opts:
      is_expand: false
  - APP_MODULE: demo-app
    opts:
      is_expand: false
  - LIBRARY_VARIANT: debug
    opts:
      is_expand: false
  - APP_MOCK_VARIANT: mockDebug
    opts:
      is_expand: false
  - APP_PROD_VARIANT: prodDebug
    opts:
      is_expand: false
  - NEXUS_URL: https://oss.sonatype.org/service/local/staging/deploy/maven2/
  - NEXUS_SNAPSHOT_URL: https://oss.sonatype.org/content/repositories/snapshots/
